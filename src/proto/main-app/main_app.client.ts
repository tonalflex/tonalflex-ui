// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "src/proto/main_app.proto" (package "main_app", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { MainApp } from "../main-app/main_app";
import type { Status } from "../main-app/main_app";
import type { ConfigName } from "../main-app/main_app";
import type { ConfigList } from "../main-app/main_app";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ConnectionStatus } from "../main-app/main_app";
import type { Empty } from "../main-app/main_app";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * MainApp Service for managing the application.
 *
 * @generated from protobuf service main_app.MainApp
 */
export interface IMainAppClient {
    /**
     * Check if the server is connected.
     *
     * @generated from protobuf rpc: CheckConnection(main_app.Empty) returns (main_app.ConnectionStatus);
     */
    checkConnection(input: Empty, options?: RpcOptions): UnaryCall<Empty, ConnectionStatus>;
    /**
     * Fetch all configuration file names.
     *
     * @generated from protobuf rpc: FetchConfigFiles(main_app.Empty) returns (main_app.ConfigList);
     */
    fetchConfigFiles(input: Empty, options?: RpcOptions): UnaryCall<Empty, ConfigList>;
    /**
     * Use a configuration file to start a process.
     *
     * @generated from protobuf rpc: UseConfigFile(main_app.ConfigName) returns (main_app.Status);
     */
    useConfigFile(input: ConfigName, options?: RpcOptions): UnaryCall<ConfigName, Status>;
}
/**
 * MainApp Service for managing the application.
 *
 * @generated from protobuf service main_app.MainApp
 */
export class MainAppClient implements IMainAppClient, ServiceInfo {
    typeName = MainApp.typeName;
    methods = MainApp.methods;
    options = MainApp.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Check if the server is connected.
     *
     * @generated from protobuf rpc: CheckConnection(main_app.Empty) returns (main_app.ConnectionStatus);
     */
    checkConnection(input: Empty, options?: RpcOptions): UnaryCall<Empty, ConnectionStatus> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, ConnectionStatus>("unary", this._transport, method, opt, input);
    }
    /**
     * Fetch all configuration file names.
     *
     * @generated from protobuf rpc: FetchConfigFiles(main_app.Empty) returns (main_app.ConfigList);
     */
    fetchConfigFiles(input: Empty, options?: RpcOptions): UnaryCall<Empty, ConfigList> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, ConfigList>("unary", this._transport, method, opt, input);
    }
    /**
     * Use a configuration file to start a process.
     *
     * @generated from protobuf rpc: UseConfigFile(main_app.ConfigName) returns (main_app.Status);
     */
    useConfigFile(input: ConfigName, options?: RpcOptions): UnaryCall<ConfigName, Status> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<ConfigName, Status>("unary", this._transport, method, opt, input);
    }
}
