// @generated by protobuf-ts 2.9.4 with parameter client_generic
// @generated from protobuf file "sushi_rpc.proto" (package "sushi_rpc", syntax proto3)
// tslint:disable
//
//* gRPC definitions for external control of sushi
//
// @copyright 2018 - 2022 Modern Ancient Instruments Networked AB, dba Elk, Stockholm
//
import { NotificationController } from "./sushi_rpc";
import type { PropertyNotificationBlocklist } from "./sushi_rpc";
import type { ParameterUpdate } from "./sushi_rpc";
import type { ParameterNotificationBlocklist } from "./sushi_rpc";
import type { ProcessorUpdate } from "./sushi_rpc";
import type { TrackUpdate } from "./sushi_rpc";
import type { TransportUpdate } from "./sushi_rpc";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import { SessionController } from "./sushi_rpc";
import type { SessionState } from "./sushi_rpc";
import { OscController } from "./sushi_rpc";
import type { OscParameterOutputList } from "./sushi_rpc";
import { CvGateController } from "./sushi_rpc";
import type { GateConnection } from "./sushi_rpc";
import type { CvConnection } from "./sushi_rpc";
import type { GateConnectionList } from "./sushi_rpc";
import type { CvConnectionList } from "./sushi_rpc";
import { AudioRoutingController } from "./sushi_rpc";
import type { AudioConnection } from "./sushi_rpc";
import type { AudioConnectionList } from "./sushi_rpc";
import { MidiController } from "./sushi_rpc";
import type { MidiPCConnection } from "./sushi_rpc";
import type { MidiCCConnection } from "./sushi_rpc";
import type { MidiKbdConnection } from "./sushi_rpc";
import type { MidiClockSetRequest } from "./sushi_rpc";
import type { MidiPCConnectionList } from "./sushi_rpc";
import type { MidiCCConnectionList } from "./sushi_rpc";
import type { MidiKbdConnectionList } from "./sushi_rpc";
import { ParameterController } from "./sushi_rpc";
import type { PropertyValue } from "./sushi_rpc";
import type { PropertyInfo } from "./sushi_rpc";
import type { PropertyIdentifier } from "./sushi_rpc";
import type { PropertyIdRequest } from "./sushi_rpc";
import type { PropertyInfoList } from "./sushi_rpc";
import type { ParameterValue } from "./sushi_rpc";
import type { ParameterInfo } from "./sushi_rpc";
import type { ParameterIdentifier } from "./sushi_rpc";
import type { ParameterIdRequest } from "./sushi_rpc";
import type { ParameterInfoList } from "./sushi_rpc";
import { ProgramController } from "./sushi_rpc";
import type { ProcessorProgramSetRequest } from "./sushi_rpc";
import type { ProgramInfoList } from "./sushi_rpc";
import type { ProcessorProgramIdentifier } from "./sushi_rpc";
import type { ProgramIdentifier } from "./sushi_rpc";
import { AudioGraphController } from "./sushi_rpc";
import type { DeleteProcessorRequest } from "./sushi_rpc";
import type { MoveProcessorRequest } from "./sushi_rpc";
import type { CreateProcessorRequest } from "./sushi_rpc";
import type { CreatePostTrackRequest } from "./sushi_rpc";
import type { CreatePreTrackRequest } from "./sushi_rpc";
import type { CreateMultibusTrackRequest } from "./sushi_rpc";
import type { CreateTrackRequest } from "./sushi_rpc";
import type { ProcessorStateSetRequest } from "./sushi_rpc";
import type { ProcessorBypassStateSetRequest } from "./sushi_rpc";
import type { ProcessorState } from "./sushi_rpc";
import type { ProcessorInfo } from "./sushi_rpc";
import type { TrackInfo } from "./sushi_rpc";
import type { TrackInfoList } from "./sushi_rpc";
import type { ProcessorInfoList } from "./sushi_rpc";
import { KeyboardController } from "./sushi_rpc";
import type { NoteModulationRequest } from "./sushi_rpc";
import type { NoteAftertouchRequest } from "./sushi_rpc";
import type { NoteOffRequest } from "./sushi_rpc";
import type { NoteOnRequest } from "./sushi_rpc";
import { TimingController } from "./sushi_rpc";
import type { ProcessorIdentifier } from "./sushi_rpc";
import type { TrackIdentifier } from "./sushi_rpc";
import type { CpuTimings } from "./sushi_rpc";
import type { GenericBoolValue } from "./sushi_rpc";
import { TransportController } from "./sushi_rpc";
import type { TimeSignature } from "./sushi_rpc";
import type { SyncMode } from "./sushi_rpc";
import type { PlayingMode } from "./sushi_rpc";
import type { GenericFloatValue } from "./sushi_rpc";
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { SystemController } from "./sushi_rpc";
import type { GenericIntValue } from "./sushi_rpc";
import type { SushiBuildInfo } from "./sushi_rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GenericStringValue } from "./sushi_rpc";
import type { GenericVoidValue } from "./sushi_rpc";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service sushi_rpc.SystemController
 */
export interface ISystemControllerClient {
    /**
     * @generated from protobuf rpc: GetSushiVersion(sushi_rpc.GenericVoidValue) returns (sushi_rpc.GenericStringValue);
     */
    getSushiVersion(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, GenericStringValue>;
    /**
     * @generated from protobuf rpc: GetBuildInfo(sushi_rpc.GenericVoidValue) returns (sushi_rpc.SushiBuildInfo);
     */
    getBuildInfo(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, SushiBuildInfo>;
    /**
     * @generated from protobuf rpc: GetInputAudioChannelCount(sushi_rpc.GenericVoidValue) returns (sushi_rpc.GenericIntValue);
     */
    getInputAudioChannelCount(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, GenericIntValue>;
    /**
     * @generated from protobuf rpc: GetOutputAudioChannelCount(sushi_rpc.GenericVoidValue) returns (sushi_rpc.GenericIntValue);
     */
    getOutputAudioChannelCount(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, GenericIntValue>;
}
/**
 * @generated from protobuf service sushi_rpc.SystemController
 */
export class SystemControllerClient implements ISystemControllerClient, ServiceInfo {
    typeName = SystemController.typeName;
    methods = SystemController.methods;
    options = SystemController.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetSushiVersion(sushi_rpc.GenericVoidValue) returns (sushi_rpc.GenericStringValue);
     */
    getSushiVersion(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, GenericStringValue> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GenericVoidValue, GenericStringValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetBuildInfo(sushi_rpc.GenericVoidValue) returns (sushi_rpc.SushiBuildInfo);
     */
    getBuildInfo(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, SushiBuildInfo> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GenericVoidValue, SushiBuildInfo>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetInputAudioChannelCount(sushi_rpc.GenericVoidValue) returns (sushi_rpc.GenericIntValue);
     */
    getInputAudioChannelCount(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, GenericIntValue> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<GenericVoidValue, GenericIntValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetOutputAudioChannelCount(sushi_rpc.GenericVoidValue) returns (sushi_rpc.GenericIntValue);
     */
    getOutputAudioChannelCount(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, GenericIntValue> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<GenericVoidValue, GenericIntValue>("unary", this._transport, method, opt, input);
    }
}
/**
 * @generated from protobuf service sushi_rpc.TransportController
 */
export interface ITransportControllerClient {
    /**
     * @generated from protobuf rpc: GetSamplerate(sushi_rpc.GenericVoidValue) returns (sushi_rpc.GenericFloatValue);
     */
    getSamplerate(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, GenericFloatValue>;
    /**
     * @generated from protobuf rpc: GetPlayingMode(sushi_rpc.GenericVoidValue) returns (sushi_rpc.PlayingMode);
     */
    getPlayingMode(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, PlayingMode>;
    /**
     * @generated from protobuf rpc: GetSyncMode(sushi_rpc.GenericVoidValue) returns (sushi_rpc.SyncMode);
     */
    getSyncMode(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, SyncMode>;
    /**
     * @generated from protobuf rpc: GetTimeSignature(sushi_rpc.GenericVoidValue) returns (sushi_rpc.TimeSignature);
     */
    getTimeSignature(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, TimeSignature>;
    /**
     * @generated from protobuf rpc: GetTempo(sushi_rpc.GenericVoidValue) returns (sushi_rpc.GenericFloatValue);
     */
    getTempo(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, GenericFloatValue>;
    /**
     * @generated from protobuf rpc: SetTempo(sushi_rpc.GenericFloatValue) returns (sushi_rpc.GenericVoidValue);
     */
    setTempo(input: GenericFloatValue, options?: RpcOptions): UnaryCall<GenericFloatValue, GenericVoidValue>;
    /**
     * @generated from protobuf rpc: SetPlayingMode(sushi_rpc.PlayingMode) returns (sushi_rpc.GenericVoidValue);
     */
    setPlayingMode(input: PlayingMode, options?: RpcOptions): UnaryCall<PlayingMode, GenericVoidValue>;
    /**
     * @generated from protobuf rpc: SetSyncMode(sushi_rpc.SyncMode) returns (sushi_rpc.GenericVoidValue);
     */
    setSyncMode(input: SyncMode, options?: RpcOptions): UnaryCall<SyncMode, GenericVoidValue>;
    /**
     * @generated from protobuf rpc: SetTimeSignature(sushi_rpc.TimeSignature) returns (sushi_rpc.GenericVoidValue);
     */
    setTimeSignature(input: TimeSignature, options?: RpcOptions): UnaryCall<TimeSignature, GenericVoidValue>;
}
/**
 * @generated from protobuf service sushi_rpc.TransportController
 */
export class TransportControllerClient implements ITransportControllerClient, ServiceInfo {
    typeName = TransportController.typeName;
    methods = TransportController.methods;
    options = TransportController.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetSamplerate(sushi_rpc.GenericVoidValue) returns (sushi_rpc.GenericFloatValue);
     */
    getSamplerate(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, GenericFloatValue> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GenericVoidValue, GenericFloatValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetPlayingMode(sushi_rpc.GenericVoidValue) returns (sushi_rpc.PlayingMode);
     */
    getPlayingMode(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, PlayingMode> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GenericVoidValue, PlayingMode>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetSyncMode(sushi_rpc.GenericVoidValue) returns (sushi_rpc.SyncMode);
     */
    getSyncMode(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, SyncMode> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<GenericVoidValue, SyncMode>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetTimeSignature(sushi_rpc.GenericVoidValue) returns (sushi_rpc.TimeSignature);
     */
    getTimeSignature(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, TimeSignature> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<GenericVoidValue, TimeSignature>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetTempo(sushi_rpc.GenericVoidValue) returns (sushi_rpc.GenericFloatValue);
     */
    getTempo(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, GenericFloatValue> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<GenericVoidValue, GenericFloatValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SetTempo(sushi_rpc.GenericFloatValue) returns (sushi_rpc.GenericVoidValue);
     */
    setTempo(input: GenericFloatValue, options?: RpcOptions): UnaryCall<GenericFloatValue, GenericVoidValue> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<GenericFloatValue, GenericVoidValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SetPlayingMode(sushi_rpc.PlayingMode) returns (sushi_rpc.GenericVoidValue);
     */
    setPlayingMode(input: PlayingMode, options?: RpcOptions): UnaryCall<PlayingMode, GenericVoidValue> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<PlayingMode, GenericVoidValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SetSyncMode(sushi_rpc.SyncMode) returns (sushi_rpc.GenericVoidValue);
     */
    setSyncMode(input: SyncMode, options?: RpcOptions): UnaryCall<SyncMode, GenericVoidValue> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<SyncMode, GenericVoidValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SetTimeSignature(sushi_rpc.TimeSignature) returns (sushi_rpc.GenericVoidValue);
     */
    setTimeSignature(input: TimeSignature, options?: RpcOptions): UnaryCall<TimeSignature, GenericVoidValue> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<TimeSignature, GenericVoidValue>("unary", this._transport, method, opt, input);
    }
}
/**
 * @generated from protobuf service sushi_rpc.TimingController
 */
export interface ITimingControllerClient {
    /**
     * @generated from protobuf rpc: GetTimingsEnabled(sushi_rpc.GenericVoidValue) returns (sushi_rpc.GenericBoolValue);
     */
    getTimingsEnabled(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, GenericBoolValue>;
    /**
     * @generated from protobuf rpc: SetTimingsEnabled(sushi_rpc.GenericBoolValue) returns (sushi_rpc.GenericVoidValue);
     */
    setTimingsEnabled(input: GenericBoolValue, options?: RpcOptions): UnaryCall<GenericBoolValue, GenericVoidValue>;
    /**
     * @generated from protobuf rpc: GetEngineTimings(sushi_rpc.GenericVoidValue) returns (sushi_rpc.CpuTimings);
     */
    getEngineTimings(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, CpuTimings>;
    /**
     * @generated from protobuf rpc: GetTrackTimings(sushi_rpc.TrackIdentifier) returns (sushi_rpc.CpuTimings);
     */
    getTrackTimings(input: TrackIdentifier, options?: RpcOptions): UnaryCall<TrackIdentifier, CpuTimings>;
    /**
     * @generated from protobuf rpc: GetProcessorTimings(sushi_rpc.ProcessorIdentifier) returns (sushi_rpc.CpuTimings);
     */
    getProcessorTimings(input: ProcessorIdentifier, options?: RpcOptions): UnaryCall<ProcessorIdentifier, CpuTimings>;
    /**
     * @generated from protobuf rpc: ResetAllTimings(sushi_rpc.GenericVoidValue) returns (sushi_rpc.GenericVoidValue);
     */
    resetAllTimings(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, GenericVoidValue>;
    /**
     * @generated from protobuf rpc: ResetTrackTimings(sushi_rpc.TrackIdentifier) returns (sushi_rpc.GenericVoidValue);
     */
    resetTrackTimings(input: TrackIdentifier, options?: RpcOptions): UnaryCall<TrackIdentifier, GenericVoidValue>;
    /**
     * @generated from protobuf rpc: ResetProcessorTimings(sushi_rpc.ProcessorIdentifier) returns (sushi_rpc.GenericVoidValue);
     */
    resetProcessorTimings(input: ProcessorIdentifier, options?: RpcOptions): UnaryCall<ProcessorIdentifier, GenericVoidValue>;
}
/**
 * @generated from protobuf service sushi_rpc.TimingController
 */
export class TimingControllerClient implements ITimingControllerClient, ServiceInfo {
    typeName = TimingController.typeName;
    methods = TimingController.methods;
    options = TimingController.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetTimingsEnabled(sushi_rpc.GenericVoidValue) returns (sushi_rpc.GenericBoolValue);
     */
    getTimingsEnabled(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, GenericBoolValue> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GenericVoidValue, GenericBoolValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SetTimingsEnabled(sushi_rpc.GenericBoolValue) returns (sushi_rpc.GenericVoidValue);
     */
    setTimingsEnabled(input: GenericBoolValue, options?: RpcOptions): UnaryCall<GenericBoolValue, GenericVoidValue> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GenericBoolValue, GenericVoidValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetEngineTimings(sushi_rpc.GenericVoidValue) returns (sushi_rpc.CpuTimings);
     */
    getEngineTimings(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, CpuTimings> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<GenericVoidValue, CpuTimings>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetTrackTimings(sushi_rpc.TrackIdentifier) returns (sushi_rpc.CpuTimings);
     */
    getTrackTimings(input: TrackIdentifier, options?: RpcOptions): UnaryCall<TrackIdentifier, CpuTimings> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<TrackIdentifier, CpuTimings>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetProcessorTimings(sushi_rpc.ProcessorIdentifier) returns (sushi_rpc.CpuTimings);
     */
    getProcessorTimings(input: ProcessorIdentifier, options?: RpcOptions): UnaryCall<ProcessorIdentifier, CpuTimings> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<ProcessorIdentifier, CpuTimings>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ResetAllTimings(sushi_rpc.GenericVoidValue) returns (sushi_rpc.GenericVoidValue);
     */
    resetAllTimings(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, GenericVoidValue> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<GenericVoidValue, GenericVoidValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ResetTrackTimings(sushi_rpc.TrackIdentifier) returns (sushi_rpc.GenericVoidValue);
     */
    resetTrackTimings(input: TrackIdentifier, options?: RpcOptions): UnaryCall<TrackIdentifier, GenericVoidValue> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<TrackIdentifier, GenericVoidValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ResetProcessorTimings(sushi_rpc.ProcessorIdentifier) returns (sushi_rpc.GenericVoidValue);
     */
    resetProcessorTimings(input: ProcessorIdentifier, options?: RpcOptions): UnaryCall<ProcessorIdentifier, GenericVoidValue> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<ProcessorIdentifier, GenericVoidValue>("unary", this._transport, method, opt, input);
    }
}
/**
 * @generated from protobuf service sushi_rpc.KeyboardController
 */
export interface IKeyboardControllerClient {
    /**
     * @generated from protobuf rpc: SendNoteOn(sushi_rpc.NoteOnRequest) returns (sushi_rpc.GenericVoidValue);
     */
    sendNoteOn(input: NoteOnRequest, options?: RpcOptions): UnaryCall<NoteOnRequest, GenericVoidValue>;
    /**
     * @generated from protobuf rpc: SendNoteOff(sushi_rpc.NoteOffRequest) returns (sushi_rpc.GenericVoidValue);
     */
    sendNoteOff(input: NoteOffRequest, options?: RpcOptions): UnaryCall<NoteOffRequest, GenericVoidValue>;
    /**
     * @generated from protobuf rpc: SendNoteAftertouch(sushi_rpc.NoteAftertouchRequest) returns (sushi_rpc.GenericVoidValue);
     */
    sendNoteAftertouch(input: NoteAftertouchRequest, options?: RpcOptions): UnaryCall<NoteAftertouchRequest, GenericVoidValue>;
    /**
     * @generated from protobuf rpc: SendAftertouch(sushi_rpc.NoteModulationRequest) returns (sushi_rpc.GenericVoidValue);
     */
    sendAftertouch(input: NoteModulationRequest, options?: RpcOptions): UnaryCall<NoteModulationRequest, GenericVoidValue>;
    /**
     * @generated from protobuf rpc: SendPitchBend(sushi_rpc.NoteModulationRequest) returns (sushi_rpc.GenericVoidValue);
     */
    sendPitchBend(input: NoteModulationRequest, options?: RpcOptions): UnaryCall<NoteModulationRequest, GenericVoidValue>;
    /**
     * @generated from protobuf rpc: SendModulation(sushi_rpc.NoteModulationRequest) returns (sushi_rpc.GenericVoidValue);
     */
    sendModulation(input: NoteModulationRequest, options?: RpcOptions): UnaryCall<NoteModulationRequest, GenericVoidValue>;
}
/**
 * @generated from protobuf service sushi_rpc.KeyboardController
 */
export class KeyboardControllerClient implements IKeyboardControllerClient, ServiceInfo {
    typeName = KeyboardController.typeName;
    methods = KeyboardController.methods;
    options = KeyboardController.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: SendNoteOn(sushi_rpc.NoteOnRequest) returns (sushi_rpc.GenericVoidValue);
     */
    sendNoteOn(input: NoteOnRequest, options?: RpcOptions): UnaryCall<NoteOnRequest, GenericVoidValue> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<NoteOnRequest, GenericVoidValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SendNoteOff(sushi_rpc.NoteOffRequest) returns (sushi_rpc.GenericVoidValue);
     */
    sendNoteOff(input: NoteOffRequest, options?: RpcOptions): UnaryCall<NoteOffRequest, GenericVoidValue> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<NoteOffRequest, GenericVoidValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SendNoteAftertouch(sushi_rpc.NoteAftertouchRequest) returns (sushi_rpc.GenericVoidValue);
     */
    sendNoteAftertouch(input: NoteAftertouchRequest, options?: RpcOptions): UnaryCall<NoteAftertouchRequest, GenericVoidValue> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<NoteAftertouchRequest, GenericVoidValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SendAftertouch(sushi_rpc.NoteModulationRequest) returns (sushi_rpc.GenericVoidValue);
     */
    sendAftertouch(input: NoteModulationRequest, options?: RpcOptions): UnaryCall<NoteModulationRequest, GenericVoidValue> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<NoteModulationRequest, GenericVoidValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SendPitchBend(sushi_rpc.NoteModulationRequest) returns (sushi_rpc.GenericVoidValue);
     */
    sendPitchBend(input: NoteModulationRequest, options?: RpcOptions): UnaryCall<NoteModulationRequest, GenericVoidValue> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<NoteModulationRequest, GenericVoidValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SendModulation(sushi_rpc.NoteModulationRequest) returns (sushi_rpc.GenericVoidValue);
     */
    sendModulation(input: NoteModulationRequest, options?: RpcOptions): UnaryCall<NoteModulationRequest, GenericVoidValue> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<NoteModulationRequest, GenericVoidValue>("unary", this._transport, method, opt, input);
    }
}
/**
 * @generated from protobuf service sushi_rpc.AudioGraphController
 */
export interface IAudioGraphControllerClient {
    /**
     * @generated from protobuf rpc: GetAllProcessors(sushi_rpc.GenericVoidValue) returns (sushi_rpc.ProcessorInfoList);
     */
    getAllProcessors(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, ProcessorInfoList>;
    /**
     * @generated from protobuf rpc: GetAllTracks(sushi_rpc.GenericVoidValue) returns (sushi_rpc.TrackInfoList);
     */
    getAllTracks(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, TrackInfoList>;
    /**
     * @generated from protobuf rpc: GetTrackId(sushi_rpc.GenericStringValue) returns (sushi_rpc.TrackIdentifier);
     */
    getTrackId(input: GenericStringValue, options?: RpcOptions): UnaryCall<GenericStringValue, TrackIdentifier>;
    /**
     * @generated from protobuf rpc: GetTrackInfo(sushi_rpc.TrackIdentifier) returns (sushi_rpc.TrackInfo);
     */
    getTrackInfo(input: TrackIdentifier, options?: RpcOptions): UnaryCall<TrackIdentifier, TrackInfo>;
    /**
     * @generated from protobuf rpc: GetTrackProcessors(sushi_rpc.TrackIdentifier) returns (sushi_rpc.ProcessorInfoList);
     */
    getTrackProcessors(input: TrackIdentifier, options?: RpcOptions): UnaryCall<TrackIdentifier, ProcessorInfoList>;
    /**
     * @generated from protobuf rpc: GetProcessorId(sushi_rpc.GenericStringValue) returns (sushi_rpc.ProcessorIdentifier);
     */
    getProcessorId(input: GenericStringValue, options?: RpcOptions): UnaryCall<GenericStringValue, ProcessorIdentifier>;
    /**
     * @generated from protobuf rpc: GetProcessorInfo(sushi_rpc.ProcessorIdentifier) returns (sushi_rpc.ProcessorInfo);
     */
    getProcessorInfo(input: ProcessorIdentifier, options?: RpcOptions): UnaryCall<ProcessorIdentifier, ProcessorInfo>;
    /**
     * @generated from protobuf rpc: GetProcessorBypassState(sushi_rpc.ProcessorIdentifier) returns (sushi_rpc.GenericBoolValue);
     */
    getProcessorBypassState(input: ProcessorIdentifier, options?: RpcOptions): UnaryCall<ProcessorIdentifier, GenericBoolValue>;
    /**
     * @generated from protobuf rpc: GetProcessorState(sushi_rpc.ProcessorIdentifier) returns (sushi_rpc.ProcessorState);
     */
    getProcessorState(input: ProcessorIdentifier, options?: RpcOptions): UnaryCall<ProcessorIdentifier, ProcessorState>;
    /**
     * @generated from protobuf rpc: SetProcessorBypassState(sushi_rpc.ProcessorBypassStateSetRequest) returns (sushi_rpc.GenericVoidValue);
     */
    setProcessorBypassState(input: ProcessorBypassStateSetRequest, options?: RpcOptions): UnaryCall<ProcessorBypassStateSetRequest, GenericVoidValue>;
    /**
     * @generated from protobuf rpc: SetProcessorState(sushi_rpc.ProcessorStateSetRequest) returns (sushi_rpc.GenericVoidValue);
     */
    setProcessorState(input: ProcessorStateSetRequest, options?: RpcOptions): UnaryCall<ProcessorStateSetRequest, GenericVoidValue>;
    /**
     * @generated from protobuf rpc: CreateTrack(sushi_rpc.CreateTrackRequest) returns (sushi_rpc.GenericVoidValue);
     */
    createTrack(input: CreateTrackRequest, options?: RpcOptions): UnaryCall<CreateTrackRequest, GenericVoidValue>;
    /**
     * @generated from protobuf rpc: CreateMultibusTrack(sushi_rpc.CreateMultibusTrackRequest) returns (sushi_rpc.GenericVoidValue);
     */
    createMultibusTrack(input: CreateMultibusTrackRequest, options?: RpcOptions): UnaryCall<CreateMultibusTrackRequest, GenericVoidValue>;
    /**
     * @generated from protobuf rpc: CreatePreTrack(sushi_rpc.CreatePreTrackRequest) returns (sushi_rpc.GenericVoidValue);
     */
    createPreTrack(input: CreatePreTrackRequest, options?: RpcOptions): UnaryCall<CreatePreTrackRequest, GenericVoidValue>;
    /**
     * @generated from protobuf rpc: CreatePostTrack(sushi_rpc.CreatePostTrackRequest) returns (sushi_rpc.GenericVoidValue);
     */
    createPostTrack(input: CreatePostTrackRequest, options?: RpcOptions): UnaryCall<CreatePostTrackRequest, GenericVoidValue>;
    /**
     * @generated from protobuf rpc: CreateProcessorOnTrack(sushi_rpc.CreateProcessorRequest) returns (sushi_rpc.GenericVoidValue);
     */
    createProcessorOnTrack(input: CreateProcessorRequest, options?: RpcOptions): UnaryCall<CreateProcessorRequest, GenericVoidValue>;
    /**
     * @generated from protobuf rpc: MoveProcessorOnTrack(sushi_rpc.MoveProcessorRequest) returns (sushi_rpc.GenericVoidValue);
     */
    moveProcessorOnTrack(input: MoveProcessorRequest, options?: RpcOptions): UnaryCall<MoveProcessorRequest, GenericVoidValue>;
    /**
     * @generated from protobuf rpc: DeleteProcessorFromTrack(sushi_rpc.DeleteProcessorRequest) returns (sushi_rpc.GenericVoidValue);
     */
    deleteProcessorFromTrack(input: DeleteProcessorRequest, options?: RpcOptions): UnaryCall<DeleteProcessorRequest, GenericVoidValue>;
    /**
     * @generated from protobuf rpc: DeleteTrack(sushi_rpc.TrackIdentifier) returns (sushi_rpc.GenericVoidValue);
     */
    deleteTrack(input: TrackIdentifier, options?: RpcOptions): UnaryCall<TrackIdentifier, GenericVoidValue>;
}
/**
 * @generated from protobuf service sushi_rpc.AudioGraphController
 */
export class AudioGraphControllerClient implements IAudioGraphControllerClient, ServiceInfo {
    typeName = AudioGraphController.typeName;
    methods = AudioGraphController.methods;
    options = AudioGraphController.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetAllProcessors(sushi_rpc.GenericVoidValue) returns (sushi_rpc.ProcessorInfoList);
     */
    getAllProcessors(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, ProcessorInfoList> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GenericVoidValue, ProcessorInfoList>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetAllTracks(sushi_rpc.GenericVoidValue) returns (sushi_rpc.TrackInfoList);
     */
    getAllTracks(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, TrackInfoList> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GenericVoidValue, TrackInfoList>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetTrackId(sushi_rpc.GenericStringValue) returns (sushi_rpc.TrackIdentifier);
     */
    getTrackId(input: GenericStringValue, options?: RpcOptions): UnaryCall<GenericStringValue, TrackIdentifier> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<GenericStringValue, TrackIdentifier>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetTrackInfo(sushi_rpc.TrackIdentifier) returns (sushi_rpc.TrackInfo);
     */
    getTrackInfo(input: TrackIdentifier, options?: RpcOptions): UnaryCall<TrackIdentifier, TrackInfo> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<TrackIdentifier, TrackInfo>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetTrackProcessors(sushi_rpc.TrackIdentifier) returns (sushi_rpc.ProcessorInfoList);
     */
    getTrackProcessors(input: TrackIdentifier, options?: RpcOptions): UnaryCall<TrackIdentifier, ProcessorInfoList> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<TrackIdentifier, ProcessorInfoList>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetProcessorId(sushi_rpc.GenericStringValue) returns (sushi_rpc.ProcessorIdentifier);
     */
    getProcessorId(input: GenericStringValue, options?: RpcOptions): UnaryCall<GenericStringValue, ProcessorIdentifier> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<GenericStringValue, ProcessorIdentifier>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetProcessorInfo(sushi_rpc.ProcessorIdentifier) returns (sushi_rpc.ProcessorInfo);
     */
    getProcessorInfo(input: ProcessorIdentifier, options?: RpcOptions): UnaryCall<ProcessorIdentifier, ProcessorInfo> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<ProcessorIdentifier, ProcessorInfo>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetProcessorBypassState(sushi_rpc.ProcessorIdentifier) returns (sushi_rpc.GenericBoolValue);
     */
    getProcessorBypassState(input: ProcessorIdentifier, options?: RpcOptions): UnaryCall<ProcessorIdentifier, GenericBoolValue> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<ProcessorIdentifier, GenericBoolValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetProcessorState(sushi_rpc.ProcessorIdentifier) returns (sushi_rpc.ProcessorState);
     */
    getProcessorState(input: ProcessorIdentifier, options?: RpcOptions): UnaryCall<ProcessorIdentifier, ProcessorState> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<ProcessorIdentifier, ProcessorState>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SetProcessorBypassState(sushi_rpc.ProcessorBypassStateSetRequest) returns (sushi_rpc.GenericVoidValue);
     */
    setProcessorBypassState(input: ProcessorBypassStateSetRequest, options?: RpcOptions): UnaryCall<ProcessorBypassStateSetRequest, GenericVoidValue> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<ProcessorBypassStateSetRequest, GenericVoidValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SetProcessorState(sushi_rpc.ProcessorStateSetRequest) returns (sushi_rpc.GenericVoidValue);
     */
    setProcessorState(input: ProcessorStateSetRequest, options?: RpcOptions): UnaryCall<ProcessorStateSetRequest, GenericVoidValue> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<ProcessorStateSetRequest, GenericVoidValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CreateTrack(sushi_rpc.CreateTrackRequest) returns (sushi_rpc.GenericVoidValue);
     */
    createTrack(input: CreateTrackRequest, options?: RpcOptions): UnaryCall<CreateTrackRequest, GenericVoidValue> {
        const method = this.methods[11], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateTrackRequest, GenericVoidValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CreateMultibusTrack(sushi_rpc.CreateMultibusTrackRequest) returns (sushi_rpc.GenericVoidValue);
     */
    createMultibusTrack(input: CreateMultibusTrackRequest, options?: RpcOptions): UnaryCall<CreateMultibusTrackRequest, GenericVoidValue> {
        const method = this.methods[12], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateMultibusTrackRequest, GenericVoidValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CreatePreTrack(sushi_rpc.CreatePreTrackRequest) returns (sushi_rpc.GenericVoidValue);
     */
    createPreTrack(input: CreatePreTrackRequest, options?: RpcOptions): UnaryCall<CreatePreTrackRequest, GenericVoidValue> {
        const method = this.methods[13], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreatePreTrackRequest, GenericVoidValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CreatePostTrack(sushi_rpc.CreatePostTrackRequest) returns (sushi_rpc.GenericVoidValue);
     */
    createPostTrack(input: CreatePostTrackRequest, options?: RpcOptions): UnaryCall<CreatePostTrackRequest, GenericVoidValue> {
        const method = this.methods[14], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreatePostTrackRequest, GenericVoidValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CreateProcessorOnTrack(sushi_rpc.CreateProcessorRequest) returns (sushi_rpc.GenericVoidValue);
     */
    createProcessorOnTrack(input: CreateProcessorRequest, options?: RpcOptions): UnaryCall<CreateProcessorRequest, GenericVoidValue> {
        const method = this.methods[15], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateProcessorRequest, GenericVoidValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: MoveProcessorOnTrack(sushi_rpc.MoveProcessorRequest) returns (sushi_rpc.GenericVoidValue);
     */
    moveProcessorOnTrack(input: MoveProcessorRequest, options?: RpcOptions): UnaryCall<MoveProcessorRequest, GenericVoidValue> {
        const method = this.methods[16], opt = this._transport.mergeOptions(options);
        return stackIntercept<MoveProcessorRequest, GenericVoidValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteProcessorFromTrack(sushi_rpc.DeleteProcessorRequest) returns (sushi_rpc.GenericVoidValue);
     */
    deleteProcessorFromTrack(input: DeleteProcessorRequest, options?: RpcOptions): UnaryCall<DeleteProcessorRequest, GenericVoidValue> {
        const method = this.methods[17], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteProcessorRequest, GenericVoidValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteTrack(sushi_rpc.TrackIdentifier) returns (sushi_rpc.GenericVoidValue);
     */
    deleteTrack(input: TrackIdentifier, options?: RpcOptions): UnaryCall<TrackIdentifier, GenericVoidValue> {
        const method = this.methods[18], opt = this._transport.mergeOptions(options);
        return stackIntercept<TrackIdentifier, GenericVoidValue>("unary", this._transport, method, opt, input);
    }
}
/**
 * @generated from protobuf service sushi_rpc.ProgramController
 */
export interface IProgramControllerClient {
    /**
     * @generated from protobuf rpc: GetProcessorCurrentProgram(sushi_rpc.ProcessorIdentifier) returns (sushi_rpc.ProgramIdentifier);
     */
    getProcessorCurrentProgram(input: ProcessorIdentifier, options?: RpcOptions): UnaryCall<ProcessorIdentifier, ProgramIdentifier>;
    /**
     * @generated from protobuf rpc: GetProcessorCurrentProgramName(sushi_rpc.ProcessorIdentifier) returns (sushi_rpc.GenericStringValue);
     */
    getProcessorCurrentProgramName(input: ProcessorIdentifier, options?: RpcOptions): UnaryCall<ProcessorIdentifier, GenericStringValue>;
    /**
     * @generated from protobuf rpc: GetProcessorProgramName(sushi_rpc.ProcessorProgramIdentifier) returns (sushi_rpc.GenericStringValue);
     */
    getProcessorProgramName(input: ProcessorProgramIdentifier, options?: RpcOptions): UnaryCall<ProcessorProgramIdentifier, GenericStringValue>;
    /**
     * @generated from protobuf rpc: GetProcessorPrograms(sushi_rpc.ProcessorIdentifier) returns (sushi_rpc.ProgramInfoList);
     */
    getProcessorPrograms(input: ProcessorIdentifier, options?: RpcOptions): UnaryCall<ProcessorIdentifier, ProgramInfoList>;
    /**
     * @generated from protobuf rpc: SetProcessorProgram(sushi_rpc.ProcessorProgramSetRequest) returns (sushi_rpc.GenericVoidValue);
     */
    setProcessorProgram(input: ProcessorProgramSetRequest, options?: RpcOptions): UnaryCall<ProcessorProgramSetRequest, GenericVoidValue>;
}
/**
 * @generated from protobuf service sushi_rpc.ProgramController
 */
export class ProgramControllerClient implements IProgramControllerClient, ServiceInfo {
    typeName = ProgramController.typeName;
    methods = ProgramController.methods;
    options = ProgramController.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetProcessorCurrentProgram(sushi_rpc.ProcessorIdentifier) returns (sushi_rpc.ProgramIdentifier);
     */
    getProcessorCurrentProgram(input: ProcessorIdentifier, options?: RpcOptions): UnaryCall<ProcessorIdentifier, ProgramIdentifier> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ProcessorIdentifier, ProgramIdentifier>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetProcessorCurrentProgramName(sushi_rpc.ProcessorIdentifier) returns (sushi_rpc.GenericStringValue);
     */
    getProcessorCurrentProgramName(input: ProcessorIdentifier, options?: RpcOptions): UnaryCall<ProcessorIdentifier, GenericStringValue> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<ProcessorIdentifier, GenericStringValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetProcessorProgramName(sushi_rpc.ProcessorProgramIdentifier) returns (sushi_rpc.GenericStringValue);
     */
    getProcessorProgramName(input: ProcessorProgramIdentifier, options?: RpcOptions): UnaryCall<ProcessorProgramIdentifier, GenericStringValue> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<ProcessorProgramIdentifier, GenericStringValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetProcessorPrograms(sushi_rpc.ProcessorIdentifier) returns (sushi_rpc.ProgramInfoList);
     */
    getProcessorPrograms(input: ProcessorIdentifier, options?: RpcOptions): UnaryCall<ProcessorIdentifier, ProgramInfoList> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<ProcessorIdentifier, ProgramInfoList>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SetProcessorProgram(sushi_rpc.ProcessorProgramSetRequest) returns (sushi_rpc.GenericVoidValue);
     */
    setProcessorProgram(input: ProcessorProgramSetRequest, options?: RpcOptions): UnaryCall<ProcessorProgramSetRequest, GenericVoidValue> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<ProcessorProgramSetRequest, GenericVoidValue>("unary", this._transport, method, opt, input);
    }
}
/**
 * @generated from protobuf service sushi_rpc.ParameterController
 */
export interface IParameterControllerClient {
    /**
     * @generated from protobuf rpc: GetTrackParameters(sushi_rpc.TrackIdentifier) returns (sushi_rpc.ParameterInfoList);
     */
    getTrackParameters(input: TrackIdentifier, options?: RpcOptions): UnaryCall<TrackIdentifier, ParameterInfoList>;
    /**
     * @generated from protobuf rpc: GetProcessorParameters(sushi_rpc.ProcessorIdentifier) returns (sushi_rpc.ParameterInfoList);
     */
    getProcessorParameters(input: ProcessorIdentifier, options?: RpcOptions): UnaryCall<ProcessorIdentifier, ParameterInfoList>;
    /**
     * @generated from protobuf rpc: GetParameterId(sushi_rpc.ParameterIdRequest) returns (sushi_rpc.ParameterIdentifier);
     */
    getParameterId(input: ParameterIdRequest, options?: RpcOptions): UnaryCall<ParameterIdRequest, ParameterIdentifier>;
    /**
     * @generated from protobuf rpc: GetParameterInfo(sushi_rpc.ParameterIdentifier) returns (sushi_rpc.ParameterInfo);
     */
    getParameterInfo(input: ParameterIdentifier, options?: RpcOptions): UnaryCall<ParameterIdentifier, ParameterInfo>;
    /**
     * @generated from protobuf rpc: GetParameterValue(sushi_rpc.ParameterIdentifier) returns (sushi_rpc.GenericFloatValue);
     */
    getParameterValue(input: ParameterIdentifier, options?: RpcOptions): UnaryCall<ParameterIdentifier, GenericFloatValue>;
    /**
     * @generated from protobuf rpc: GetParameterValueInDomain(sushi_rpc.ParameterIdentifier) returns (sushi_rpc.GenericFloatValue);
     */
    getParameterValueInDomain(input: ParameterIdentifier, options?: RpcOptions): UnaryCall<ParameterIdentifier, GenericFloatValue>;
    /**
     * @generated from protobuf rpc: GetParameterValueAsString(sushi_rpc.ParameterIdentifier) returns (sushi_rpc.GenericStringValue);
     */
    getParameterValueAsString(input: ParameterIdentifier, options?: RpcOptions): UnaryCall<ParameterIdentifier, GenericStringValue>;
    /**
     * @generated from protobuf rpc: SetParameterValue(sushi_rpc.ParameterValue) returns (sushi_rpc.GenericVoidValue);
     */
    setParameterValue(input: ParameterValue, options?: RpcOptions): UnaryCall<ParameterValue, GenericVoidValue>;
    /**
     * @generated from protobuf rpc: GetTrackProperties(sushi_rpc.TrackIdentifier) returns (sushi_rpc.PropertyInfoList);
     */
    getTrackProperties(input: TrackIdentifier, options?: RpcOptions): UnaryCall<TrackIdentifier, PropertyInfoList>;
    /**
     * @generated from protobuf rpc: GetProcessorProperties(sushi_rpc.ProcessorIdentifier) returns (sushi_rpc.PropertyInfoList);
     */
    getProcessorProperties(input: ProcessorIdentifier, options?: RpcOptions): UnaryCall<ProcessorIdentifier, PropertyInfoList>;
    /**
     * @generated from protobuf rpc: GetPropertyId(sushi_rpc.PropertyIdRequest) returns (sushi_rpc.PropertyIdentifier);
     */
    getPropertyId(input: PropertyIdRequest, options?: RpcOptions): UnaryCall<PropertyIdRequest, PropertyIdentifier>;
    /**
     * @generated from protobuf rpc: GetPropertyInfo(sushi_rpc.PropertyIdentifier) returns (sushi_rpc.PropertyInfo);
     */
    getPropertyInfo(input: PropertyIdentifier, options?: RpcOptions): UnaryCall<PropertyIdentifier, PropertyInfo>;
    /**
     * @generated from protobuf rpc: GetPropertyValue(sushi_rpc.PropertyIdentifier) returns (sushi_rpc.GenericStringValue);
     */
    getPropertyValue(input: PropertyIdentifier, options?: RpcOptions): UnaryCall<PropertyIdentifier, GenericStringValue>;
    /**
     * @generated from protobuf rpc: SetPropertyValue(sushi_rpc.PropertyValue) returns (sushi_rpc.GenericVoidValue);
     */
    setPropertyValue(input: PropertyValue, options?: RpcOptions): UnaryCall<PropertyValue, GenericVoidValue>;
}
/**
 * @generated from protobuf service sushi_rpc.ParameterController
 */
export class ParameterControllerClient implements IParameterControllerClient, ServiceInfo {
    typeName = ParameterController.typeName;
    methods = ParameterController.methods;
    options = ParameterController.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetTrackParameters(sushi_rpc.TrackIdentifier) returns (sushi_rpc.ParameterInfoList);
     */
    getTrackParameters(input: TrackIdentifier, options?: RpcOptions): UnaryCall<TrackIdentifier, ParameterInfoList> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<TrackIdentifier, ParameterInfoList>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetProcessorParameters(sushi_rpc.ProcessorIdentifier) returns (sushi_rpc.ParameterInfoList);
     */
    getProcessorParameters(input: ProcessorIdentifier, options?: RpcOptions): UnaryCall<ProcessorIdentifier, ParameterInfoList> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<ProcessorIdentifier, ParameterInfoList>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetParameterId(sushi_rpc.ParameterIdRequest) returns (sushi_rpc.ParameterIdentifier);
     */
    getParameterId(input: ParameterIdRequest, options?: RpcOptions): UnaryCall<ParameterIdRequest, ParameterIdentifier> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<ParameterIdRequest, ParameterIdentifier>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetParameterInfo(sushi_rpc.ParameterIdentifier) returns (sushi_rpc.ParameterInfo);
     */
    getParameterInfo(input: ParameterIdentifier, options?: RpcOptions): UnaryCall<ParameterIdentifier, ParameterInfo> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<ParameterIdentifier, ParameterInfo>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetParameterValue(sushi_rpc.ParameterIdentifier) returns (sushi_rpc.GenericFloatValue);
     */
    getParameterValue(input: ParameterIdentifier, options?: RpcOptions): UnaryCall<ParameterIdentifier, GenericFloatValue> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<ParameterIdentifier, GenericFloatValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetParameterValueInDomain(sushi_rpc.ParameterIdentifier) returns (sushi_rpc.GenericFloatValue);
     */
    getParameterValueInDomain(input: ParameterIdentifier, options?: RpcOptions): UnaryCall<ParameterIdentifier, GenericFloatValue> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<ParameterIdentifier, GenericFloatValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetParameterValueAsString(sushi_rpc.ParameterIdentifier) returns (sushi_rpc.GenericStringValue);
     */
    getParameterValueAsString(input: ParameterIdentifier, options?: RpcOptions): UnaryCall<ParameterIdentifier, GenericStringValue> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<ParameterIdentifier, GenericStringValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SetParameterValue(sushi_rpc.ParameterValue) returns (sushi_rpc.GenericVoidValue);
     */
    setParameterValue(input: ParameterValue, options?: RpcOptions): UnaryCall<ParameterValue, GenericVoidValue> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<ParameterValue, GenericVoidValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetTrackProperties(sushi_rpc.TrackIdentifier) returns (sushi_rpc.PropertyInfoList);
     */
    getTrackProperties(input: TrackIdentifier, options?: RpcOptions): UnaryCall<TrackIdentifier, PropertyInfoList> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<TrackIdentifier, PropertyInfoList>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetProcessorProperties(sushi_rpc.ProcessorIdentifier) returns (sushi_rpc.PropertyInfoList);
     */
    getProcessorProperties(input: ProcessorIdentifier, options?: RpcOptions): UnaryCall<ProcessorIdentifier, PropertyInfoList> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<ProcessorIdentifier, PropertyInfoList>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetPropertyId(sushi_rpc.PropertyIdRequest) returns (sushi_rpc.PropertyIdentifier);
     */
    getPropertyId(input: PropertyIdRequest, options?: RpcOptions): UnaryCall<PropertyIdRequest, PropertyIdentifier> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<PropertyIdRequest, PropertyIdentifier>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetPropertyInfo(sushi_rpc.PropertyIdentifier) returns (sushi_rpc.PropertyInfo);
     */
    getPropertyInfo(input: PropertyIdentifier, options?: RpcOptions): UnaryCall<PropertyIdentifier, PropertyInfo> {
        const method = this.methods[11], opt = this._transport.mergeOptions(options);
        return stackIntercept<PropertyIdentifier, PropertyInfo>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetPropertyValue(sushi_rpc.PropertyIdentifier) returns (sushi_rpc.GenericStringValue);
     */
    getPropertyValue(input: PropertyIdentifier, options?: RpcOptions): UnaryCall<PropertyIdentifier, GenericStringValue> {
        const method = this.methods[12], opt = this._transport.mergeOptions(options);
        return stackIntercept<PropertyIdentifier, GenericStringValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SetPropertyValue(sushi_rpc.PropertyValue) returns (sushi_rpc.GenericVoidValue);
     */
    setPropertyValue(input: PropertyValue, options?: RpcOptions): UnaryCall<PropertyValue, GenericVoidValue> {
        const method = this.methods[13], opt = this._transport.mergeOptions(options);
        return stackIntercept<PropertyValue, GenericVoidValue>("unary", this._transport, method, opt, input);
    }
}
/**
 * @generated from protobuf service sushi_rpc.MidiController
 */
export interface IMidiControllerClient {
    /**
     * @generated from protobuf rpc: GetInputPorts(sushi_rpc.GenericVoidValue) returns (sushi_rpc.GenericIntValue);
     */
    getInputPorts(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, GenericIntValue>;
    /**
     * @generated from protobuf rpc: GetOutputPorts(sushi_rpc.GenericVoidValue) returns (sushi_rpc.GenericIntValue);
     */
    getOutputPorts(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, GenericIntValue>;
    /**
     * @generated from protobuf rpc: GetAllKbdInputConnections(sushi_rpc.GenericVoidValue) returns (sushi_rpc.MidiKbdConnectionList);
     */
    getAllKbdInputConnections(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, MidiKbdConnectionList>;
    /**
     * @generated from protobuf rpc: GetAllKbdOutputConnections(sushi_rpc.GenericVoidValue) returns (sushi_rpc.MidiKbdConnectionList);
     */
    getAllKbdOutputConnections(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, MidiKbdConnectionList>;
    /**
     * @generated from protobuf rpc: GetAllCCInputConnections(sushi_rpc.GenericVoidValue) returns (sushi_rpc.MidiCCConnectionList);
     */
    getAllCCInputConnections(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, MidiCCConnectionList>;
    /**
     * @generated from protobuf rpc: GetAllPCInputConnections(sushi_rpc.GenericVoidValue) returns (sushi_rpc.MidiPCConnectionList);
     */
    getAllPCInputConnections(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, MidiPCConnectionList>;
    /**
     * @generated from protobuf rpc: GetCCInputConnectionsForProcessor(sushi_rpc.ProcessorIdentifier) returns (sushi_rpc.MidiCCConnectionList);
     */
    getCCInputConnectionsForProcessor(input: ProcessorIdentifier, options?: RpcOptions): UnaryCall<ProcessorIdentifier, MidiCCConnectionList>;
    /**
     * @generated from protobuf rpc: GetPCInputConnectionsForProcessor(sushi_rpc.ProcessorIdentifier) returns (sushi_rpc.MidiPCConnectionList);
     */
    getPCInputConnectionsForProcessor(input: ProcessorIdentifier, options?: RpcOptions): UnaryCall<ProcessorIdentifier, MidiPCConnectionList>;
    /**
     * @generated from protobuf rpc: GetMidiClockOutputEnabled(sushi_rpc.GenericIntValue) returns (sushi_rpc.GenericBoolValue);
     */
    getMidiClockOutputEnabled(input: GenericIntValue, options?: RpcOptions): UnaryCall<GenericIntValue, GenericBoolValue>;
    /**
     * @generated from protobuf rpc: SetMidiClockOutputEnabled(sushi_rpc.MidiClockSetRequest) returns (sushi_rpc.GenericVoidValue);
     */
    setMidiClockOutputEnabled(input: MidiClockSetRequest, options?: RpcOptions): UnaryCall<MidiClockSetRequest, GenericVoidValue>;
    /**
     * @generated from protobuf rpc: ConnectKbdInputToTrack(sushi_rpc.MidiKbdConnection) returns (sushi_rpc.GenericVoidValue);
     */
    connectKbdInputToTrack(input: MidiKbdConnection, options?: RpcOptions): UnaryCall<MidiKbdConnection, GenericVoidValue>;
    /**
     * @generated from protobuf rpc: ConnectKbdOutputFromTrack(sushi_rpc.MidiKbdConnection) returns (sushi_rpc.GenericVoidValue);
     */
    connectKbdOutputFromTrack(input: MidiKbdConnection, options?: RpcOptions): UnaryCall<MidiKbdConnection, GenericVoidValue>;
    /**
     * @generated from protobuf rpc: ConnectCCToParameter(sushi_rpc.MidiCCConnection) returns (sushi_rpc.GenericVoidValue);
     */
    connectCCToParameter(input: MidiCCConnection, options?: RpcOptions): UnaryCall<MidiCCConnection, GenericVoidValue>;
    /**
     * @generated from protobuf rpc: ConnectPCToProcessor(sushi_rpc.MidiPCConnection) returns (sushi_rpc.GenericVoidValue);
     */
    connectPCToProcessor(input: MidiPCConnection, options?: RpcOptions): UnaryCall<MidiPCConnection, GenericVoidValue>;
    /**
     * @generated from protobuf rpc: DisconnectKbdInput(sushi_rpc.MidiKbdConnection) returns (sushi_rpc.GenericVoidValue);
     */
    disconnectKbdInput(input: MidiKbdConnection, options?: RpcOptions): UnaryCall<MidiKbdConnection, GenericVoidValue>;
    /**
     * @generated from protobuf rpc: DisconnectKbdOutput(sushi_rpc.MidiKbdConnection) returns (sushi_rpc.GenericVoidValue);
     */
    disconnectKbdOutput(input: MidiKbdConnection, options?: RpcOptions): UnaryCall<MidiKbdConnection, GenericVoidValue>;
    /**
     * @generated from protobuf rpc: DisconnectCC(sushi_rpc.MidiCCConnection) returns (sushi_rpc.GenericVoidValue);
     */
    disconnectCC(input: MidiCCConnection, options?: RpcOptions): UnaryCall<MidiCCConnection, GenericVoidValue>;
    /**
     * @generated from protobuf rpc: DisconnectPC(sushi_rpc.MidiPCConnection) returns (sushi_rpc.GenericVoidValue);
     */
    disconnectPC(input: MidiPCConnection, options?: RpcOptions): UnaryCall<MidiPCConnection, GenericVoidValue>;
    /**
     * @generated from protobuf rpc: DisconnectAllCCFromProcessor(sushi_rpc.ProcessorIdentifier) returns (sushi_rpc.GenericVoidValue);
     */
    disconnectAllCCFromProcessor(input: ProcessorIdentifier, options?: RpcOptions): UnaryCall<ProcessorIdentifier, GenericVoidValue>;
    /**
     * @generated from protobuf rpc: DisconnectAllPCFromProcessor(sushi_rpc.ProcessorIdentifier) returns (sushi_rpc.GenericVoidValue);
     */
    disconnectAllPCFromProcessor(input: ProcessorIdentifier, options?: RpcOptions): UnaryCall<ProcessorIdentifier, GenericVoidValue>;
}
/**
 * @generated from protobuf service sushi_rpc.MidiController
 */
export class MidiControllerClient implements IMidiControllerClient, ServiceInfo {
    typeName = MidiController.typeName;
    methods = MidiController.methods;
    options = MidiController.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetInputPorts(sushi_rpc.GenericVoidValue) returns (sushi_rpc.GenericIntValue);
     */
    getInputPorts(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, GenericIntValue> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GenericVoidValue, GenericIntValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetOutputPorts(sushi_rpc.GenericVoidValue) returns (sushi_rpc.GenericIntValue);
     */
    getOutputPorts(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, GenericIntValue> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GenericVoidValue, GenericIntValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetAllKbdInputConnections(sushi_rpc.GenericVoidValue) returns (sushi_rpc.MidiKbdConnectionList);
     */
    getAllKbdInputConnections(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, MidiKbdConnectionList> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<GenericVoidValue, MidiKbdConnectionList>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetAllKbdOutputConnections(sushi_rpc.GenericVoidValue) returns (sushi_rpc.MidiKbdConnectionList);
     */
    getAllKbdOutputConnections(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, MidiKbdConnectionList> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<GenericVoidValue, MidiKbdConnectionList>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetAllCCInputConnections(sushi_rpc.GenericVoidValue) returns (sushi_rpc.MidiCCConnectionList);
     */
    getAllCCInputConnections(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, MidiCCConnectionList> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<GenericVoidValue, MidiCCConnectionList>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetAllPCInputConnections(sushi_rpc.GenericVoidValue) returns (sushi_rpc.MidiPCConnectionList);
     */
    getAllPCInputConnections(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, MidiPCConnectionList> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<GenericVoidValue, MidiPCConnectionList>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetCCInputConnectionsForProcessor(sushi_rpc.ProcessorIdentifier) returns (sushi_rpc.MidiCCConnectionList);
     */
    getCCInputConnectionsForProcessor(input: ProcessorIdentifier, options?: RpcOptions): UnaryCall<ProcessorIdentifier, MidiCCConnectionList> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<ProcessorIdentifier, MidiCCConnectionList>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetPCInputConnectionsForProcessor(sushi_rpc.ProcessorIdentifier) returns (sushi_rpc.MidiPCConnectionList);
     */
    getPCInputConnectionsForProcessor(input: ProcessorIdentifier, options?: RpcOptions): UnaryCall<ProcessorIdentifier, MidiPCConnectionList> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<ProcessorIdentifier, MidiPCConnectionList>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetMidiClockOutputEnabled(sushi_rpc.GenericIntValue) returns (sushi_rpc.GenericBoolValue);
     */
    getMidiClockOutputEnabled(input: GenericIntValue, options?: RpcOptions): UnaryCall<GenericIntValue, GenericBoolValue> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<GenericIntValue, GenericBoolValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SetMidiClockOutputEnabled(sushi_rpc.MidiClockSetRequest) returns (sushi_rpc.GenericVoidValue);
     */
    setMidiClockOutputEnabled(input: MidiClockSetRequest, options?: RpcOptions): UnaryCall<MidiClockSetRequest, GenericVoidValue> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<MidiClockSetRequest, GenericVoidValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ConnectKbdInputToTrack(sushi_rpc.MidiKbdConnection) returns (sushi_rpc.GenericVoidValue);
     */
    connectKbdInputToTrack(input: MidiKbdConnection, options?: RpcOptions): UnaryCall<MidiKbdConnection, GenericVoidValue> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<MidiKbdConnection, GenericVoidValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ConnectKbdOutputFromTrack(sushi_rpc.MidiKbdConnection) returns (sushi_rpc.GenericVoidValue);
     */
    connectKbdOutputFromTrack(input: MidiKbdConnection, options?: RpcOptions): UnaryCall<MidiKbdConnection, GenericVoidValue> {
        const method = this.methods[11], opt = this._transport.mergeOptions(options);
        return stackIntercept<MidiKbdConnection, GenericVoidValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ConnectCCToParameter(sushi_rpc.MidiCCConnection) returns (sushi_rpc.GenericVoidValue);
     */
    connectCCToParameter(input: MidiCCConnection, options?: RpcOptions): UnaryCall<MidiCCConnection, GenericVoidValue> {
        const method = this.methods[12], opt = this._transport.mergeOptions(options);
        return stackIntercept<MidiCCConnection, GenericVoidValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ConnectPCToProcessor(sushi_rpc.MidiPCConnection) returns (sushi_rpc.GenericVoidValue);
     */
    connectPCToProcessor(input: MidiPCConnection, options?: RpcOptions): UnaryCall<MidiPCConnection, GenericVoidValue> {
        const method = this.methods[13], opt = this._transport.mergeOptions(options);
        return stackIntercept<MidiPCConnection, GenericVoidValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DisconnectKbdInput(sushi_rpc.MidiKbdConnection) returns (sushi_rpc.GenericVoidValue);
     */
    disconnectKbdInput(input: MidiKbdConnection, options?: RpcOptions): UnaryCall<MidiKbdConnection, GenericVoidValue> {
        const method = this.methods[14], opt = this._transport.mergeOptions(options);
        return stackIntercept<MidiKbdConnection, GenericVoidValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DisconnectKbdOutput(sushi_rpc.MidiKbdConnection) returns (sushi_rpc.GenericVoidValue);
     */
    disconnectKbdOutput(input: MidiKbdConnection, options?: RpcOptions): UnaryCall<MidiKbdConnection, GenericVoidValue> {
        const method = this.methods[15], opt = this._transport.mergeOptions(options);
        return stackIntercept<MidiKbdConnection, GenericVoidValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DisconnectCC(sushi_rpc.MidiCCConnection) returns (sushi_rpc.GenericVoidValue);
     */
    disconnectCC(input: MidiCCConnection, options?: RpcOptions): UnaryCall<MidiCCConnection, GenericVoidValue> {
        const method = this.methods[16], opt = this._transport.mergeOptions(options);
        return stackIntercept<MidiCCConnection, GenericVoidValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DisconnectPC(sushi_rpc.MidiPCConnection) returns (sushi_rpc.GenericVoidValue);
     */
    disconnectPC(input: MidiPCConnection, options?: RpcOptions): UnaryCall<MidiPCConnection, GenericVoidValue> {
        const method = this.methods[17], opt = this._transport.mergeOptions(options);
        return stackIntercept<MidiPCConnection, GenericVoidValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DisconnectAllCCFromProcessor(sushi_rpc.ProcessorIdentifier) returns (sushi_rpc.GenericVoidValue);
     */
    disconnectAllCCFromProcessor(input: ProcessorIdentifier, options?: RpcOptions): UnaryCall<ProcessorIdentifier, GenericVoidValue> {
        const method = this.methods[18], opt = this._transport.mergeOptions(options);
        return stackIntercept<ProcessorIdentifier, GenericVoidValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DisconnectAllPCFromProcessor(sushi_rpc.ProcessorIdentifier) returns (sushi_rpc.GenericVoidValue);
     */
    disconnectAllPCFromProcessor(input: ProcessorIdentifier, options?: RpcOptions): UnaryCall<ProcessorIdentifier, GenericVoidValue> {
        const method = this.methods[19], opt = this._transport.mergeOptions(options);
        return stackIntercept<ProcessorIdentifier, GenericVoidValue>("unary", this._transport, method, opt, input);
    }
}
/**
 * @generated from protobuf service sushi_rpc.AudioRoutingController
 */
export interface IAudioRoutingControllerClient {
    /**
     * @generated from protobuf rpc: GetAllInputConnections(sushi_rpc.GenericVoidValue) returns (sushi_rpc.AudioConnectionList);
     */
    getAllInputConnections(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, AudioConnectionList>;
    /**
     * @generated from protobuf rpc: GetAllOutputConnections(sushi_rpc.GenericVoidValue) returns (sushi_rpc.AudioConnectionList);
     */
    getAllOutputConnections(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, AudioConnectionList>;
    /**
     * @generated from protobuf rpc: GetInputConnectionsForTrack(sushi_rpc.TrackIdentifier) returns (sushi_rpc.AudioConnectionList);
     */
    getInputConnectionsForTrack(input: TrackIdentifier, options?: RpcOptions): UnaryCall<TrackIdentifier, AudioConnectionList>;
    /**
     * @generated from protobuf rpc: GetOutputConnectionsForTrack(sushi_rpc.TrackIdentifier) returns (sushi_rpc.AudioConnectionList);
     */
    getOutputConnectionsForTrack(input: TrackIdentifier, options?: RpcOptions): UnaryCall<TrackIdentifier, AudioConnectionList>;
    /**
     * @generated from protobuf rpc: ConnectInputChannelToTrack(sushi_rpc.AudioConnection) returns (sushi_rpc.GenericVoidValue);
     */
    connectInputChannelToTrack(input: AudioConnection, options?: RpcOptions): UnaryCall<AudioConnection, GenericVoidValue>;
    /**
     * @generated from protobuf rpc: ConnectOutputChannelFromTrack(sushi_rpc.AudioConnection) returns (sushi_rpc.GenericVoidValue);
     */
    connectOutputChannelFromTrack(input: AudioConnection, options?: RpcOptions): UnaryCall<AudioConnection, GenericVoidValue>;
    /**
     * @generated from protobuf rpc: DisconnectInput(sushi_rpc.AudioConnection) returns (sushi_rpc.GenericVoidValue);
     */
    disconnectInput(input: AudioConnection, options?: RpcOptions): UnaryCall<AudioConnection, GenericVoidValue>;
    /**
     * @generated from protobuf rpc: DisconnectOutput(sushi_rpc.AudioConnection) returns (sushi_rpc.GenericVoidValue);
     */
    disconnectOutput(input: AudioConnection, options?: RpcOptions): UnaryCall<AudioConnection, GenericVoidValue>;
    /**
     * @generated from protobuf rpc: DisconnectAllInputsFromTrack(sushi_rpc.TrackIdentifier) returns (sushi_rpc.GenericVoidValue);
     */
    disconnectAllInputsFromTrack(input: TrackIdentifier, options?: RpcOptions): UnaryCall<TrackIdentifier, GenericVoidValue>;
    /**
     * @deprecated
     * @generated from protobuf rpc: DisconnectAllOutputFromTrack(sushi_rpc.TrackIdentifier) returns (sushi_rpc.GenericVoidValue);
     */
    disconnectAllOutputFromTrack(input: TrackIdentifier, options?: RpcOptions): UnaryCall<TrackIdentifier, GenericVoidValue>;
    /**
     * @generated from protobuf rpc: DisconnectAllOutputsFromTrack(sushi_rpc.TrackIdentifier) returns (sushi_rpc.GenericVoidValue);
     */
    disconnectAllOutputsFromTrack(input: TrackIdentifier, options?: RpcOptions): UnaryCall<TrackIdentifier, GenericVoidValue>;
}
/**
 * @generated from protobuf service sushi_rpc.AudioRoutingController
 */
export class AudioRoutingControllerClient implements IAudioRoutingControllerClient, ServiceInfo {
    typeName = AudioRoutingController.typeName;
    methods = AudioRoutingController.methods;
    options = AudioRoutingController.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetAllInputConnections(sushi_rpc.GenericVoidValue) returns (sushi_rpc.AudioConnectionList);
     */
    getAllInputConnections(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, AudioConnectionList> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GenericVoidValue, AudioConnectionList>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetAllOutputConnections(sushi_rpc.GenericVoidValue) returns (sushi_rpc.AudioConnectionList);
     */
    getAllOutputConnections(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, AudioConnectionList> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GenericVoidValue, AudioConnectionList>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetInputConnectionsForTrack(sushi_rpc.TrackIdentifier) returns (sushi_rpc.AudioConnectionList);
     */
    getInputConnectionsForTrack(input: TrackIdentifier, options?: RpcOptions): UnaryCall<TrackIdentifier, AudioConnectionList> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<TrackIdentifier, AudioConnectionList>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetOutputConnectionsForTrack(sushi_rpc.TrackIdentifier) returns (sushi_rpc.AudioConnectionList);
     */
    getOutputConnectionsForTrack(input: TrackIdentifier, options?: RpcOptions): UnaryCall<TrackIdentifier, AudioConnectionList> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<TrackIdentifier, AudioConnectionList>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ConnectInputChannelToTrack(sushi_rpc.AudioConnection) returns (sushi_rpc.GenericVoidValue);
     */
    connectInputChannelToTrack(input: AudioConnection, options?: RpcOptions): UnaryCall<AudioConnection, GenericVoidValue> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<AudioConnection, GenericVoidValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ConnectOutputChannelFromTrack(sushi_rpc.AudioConnection) returns (sushi_rpc.GenericVoidValue);
     */
    connectOutputChannelFromTrack(input: AudioConnection, options?: RpcOptions): UnaryCall<AudioConnection, GenericVoidValue> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<AudioConnection, GenericVoidValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DisconnectInput(sushi_rpc.AudioConnection) returns (sushi_rpc.GenericVoidValue);
     */
    disconnectInput(input: AudioConnection, options?: RpcOptions): UnaryCall<AudioConnection, GenericVoidValue> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<AudioConnection, GenericVoidValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DisconnectOutput(sushi_rpc.AudioConnection) returns (sushi_rpc.GenericVoidValue);
     */
    disconnectOutput(input: AudioConnection, options?: RpcOptions): UnaryCall<AudioConnection, GenericVoidValue> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<AudioConnection, GenericVoidValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DisconnectAllInputsFromTrack(sushi_rpc.TrackIdentifier) returns (sushi_rpc.GenericVoidValue);
     */
    disconnectAllInputsFromTrack(input: TrackIdentifier, options?: RpcOptions): UnaryCall<TrackIdentifier, GenericVoidValue> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<TrackIdentifier, GenericVoidValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @deprecated
     * @generated from protobuf rpc: DisconnectAllOutputFromTrack(sushi_rpc.TrackIdentifier) returns (sushi_rpc.GenericVoidValue);
     */
    disconnectAllOutputFromTrack(input: TrackIdentifier, options?: RpcOptions): UnaryCall<TrackIdentifier, GenericVoidValue> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<TrackIdentifier, GenericVoidValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DisconnectAllOutputsFromTrack(sushi_rpc.TrackIdentifier) returns (sushi_rpc.GenericVoidValue);
     */
    disconnectAllOutputsFromTrack(input: TrackIdentifier, options?: RpcOptions): UnaryCall<TrackIdentifier, GenericVoidValue> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<TrackIdentifier, GenericVoidValue>("unary", this._transport, method, opt, input);
    }
}
/**
 * @generated from protobuf service sushi_rpc.CvGateController
 */
export interface ICvGateControllerClient {
    /**
     * @generated from protobuf rpc: GetCvInputChannelCount(sushi_rpc.GenericVoidValue) returns (sushi_rpc.GenericIntValue);
     */
    getCvInputChannelCount(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, GenericIntValue>;
    /**
     * @generated from protobuf rpc: GetCvOutputChannelCount(sushi_rpc.GenericVoidValue) returns (sushi_rpc.GenericIntValue);
     */
    getCvOutputChannelCount(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, GenericIntValue>;
    /**
     * @generated from protobuf rpc: GetAllCvInputConnections(sushi_rpc.GenericVoidValue) returns (sushi_rpc.CvConnectionList);
     */
    getAllCvInputConnections(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, CvConnectionList>;
    /**
     * @generated from protobuf rpc: GetAllCvOutputConnections(sushi_rpc.GenericVoidValue) returns (sushi_rpc.CvConnectionList);
     */
    getAllCvOutputConnections(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, CvConnectionList>;
    /**
     * @generated from protobuf rpc: GetAllGateInputConnections(sushi_rpc.GenericVoidValue) returns (sushi_rpc.GateConnectionList);
     */
    getAllGateInputConnections(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, GateConnectionList>;
    /**
     * @generated from protobuf rpc: GetAllGateOutputConnections(sushi_rpc.GenericVoidValue) returns (sushi_rpc.GateConnectionList);
     */
    getAllGateOutputConnections(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, GateConnectionList>;
    /**
     * @generated from protobuf rpc: GetCvInputConnectionsForProcessor(sushi_rpc.ProcessorIdentifier) returns (sushi_rpc.CvConnectionList);
     */
    getCvInputConnectionsForProcessor(input: ProcessorIdentifier, options?: RpcOptions): UnaryCall<ProcessorIdentifier, CvConnectionList>;
    /**
     * @generated from protobuf rpc: GetCvOutputConnectionsForProcessor(sushi_rpc.ProcessorIdentifier) returns (sushi_rpc.CvConnectionList);
     */
    getCvOutputConnectionsForProcessor(input: ProcessorIdentifier, options?: RpcOptions): UnaryCall<ProcessorIdentifier, CvConnectionList>;
    /**
     * @generated from protobuf rpc: GetGateInputConnectionsForProcessor(sushi_rpc.ProcessorIdentifier) returns (sushi_rpc.GateConnectionList);
     */
    getGateInputConnectionsForProcessor(input: ProcessorIdentifier, options?: RpcOptions): UnaryCall<ProcessorIdentifier, GateConnectionList>;
    /**
     * @generated from protobuf rpc: GetGateOutputConnectionsForProcessor(sushi_rpc.ProcessorIdentifier) returns (sushi_rpc.GateConnectionList);
     */
    getGateOutputConnectionsForProcessor(input: ProcessorIdentifier, options?: RpcOptions): UnaryCall<ProcessorIdentifier, GateConnectionList>;
    /**
     * @generated from protobuf rpc: ConnectCvInputToParameter(sushi_rpc.CvConnection) returns (sushi_rpc.GenericVoidValue);
     */
    connectCvInputToParameter(input: CvConnection, options?: RpcOptions): UnaryCall<CvConnection, GenericVoidValue>;
    /**
     * @generated from protobuf rpc: ConnectCvOutputFromParameter(sushi_rpc.CvConnection) returns (sushi_rpc.GenericVoidValue);
     */
    connectCvOutputFromParameter(input: CvConnection, options?: RpcOptions): UnaryCall<CvConnection, GenericVoidValue>;
    /**
     * @generated from protobuf rpc: ConnectGateInputToProcessor(sushi_rpc.GateConnection) returns (sushi_rpc.GenericVoidValue);
     */
    connectGateInputToProcessor(input: GateConnection, options?: RpcOptions): UnaryCall<GateConnection, GenericVoidValue>;
    /**
     * @generated from protobuf rpc: ConnectGateOutputFromProcessor(sushi_rpc.GateConnection) returns (sushi_rpc.GenericVoidValue);
     */
    connectGateOutputFromProcessor(input: GateConnection, options?: RpcOptions): UnaryCall<GateConnection, GenericVoidValue>;
    /**
     * @generated from protobuf rpc: DisconnectCvInput(sushi_rpc.CvConnection) returns (sushi_rpc.GenericVoidValue);
     */
    disconnectCvInput(input: CvConnection, options?: RpcOptions): UnaryCall<CvConnection, GenericVoidValue>;
    /**
     * @generated from protobuf rpc: DisconnectCvOutput(sushi_rpc.CvConnection) returns (sushi_rpc.GenericVoidValue);
     */
    disconnectCvOutput(input: CvConnection, options?: RpcOptions): UnaryCall<CvConnection, GenericVoidValue>;
    /**
     * @generated from protobuf rpc: DisconnectGateInput(sushi_rpc.GateConnection) returns (sushi_rpc.GenericVoidValue);
     */
    disconnectGateInput(input: GateConnection, options?: RpcOptions): UnaryCall<GateConnection, GenericVoidValue>;
    /**
     * @generated from protobuf rpc: DisconnectGateOutput(sushi_rpc.GateConnection) returns (sushi_rpc.GenericVoidValue);
     */
    disconnectGateOutput(input: GateConnection, options?: RpcOptions): UnaryCall<GateConnection, GenericVoidValue>;
    /**
     * @generated from protobuf rpc: DisconnectAllCvInputsFromProcessor(sushi_rpc.ProcessorIdentifier) returns (sushi_rpc.GenericVoidValue);
     */
    disconnectAllCvInputsFromProcessor(input: ProcessorIdentifier, options?: RpcOptions): UnaryCall<ProcessorIdentifier, GenericVoidValue>;
    /**
     * @generated from protobuf rpc: DisconnectAllCvOutputsFromProcessor(sushi_rpc.ProcessorIdentifier) returns (sushi_rpc.GenericVoidValue);
     */
    disconnectAllCvOutputsFromProcessor(input: ProcessorIdentifier, options?: RpcOptions): UnaryCall<ProcessorIdentifier, GenericVoidValue>;
    /**
     * @generated from protobuf rpc: DisconnectAllGateInputsFromProcessor(sushi_rpc.ProcessorIdentifier) returns (sushi_rpc.GenericVoidValue);
     */
    disconnectAllGateInputsFromProcessor(input: ProcessorIdentifier, options?: RpcOptions): UnaryCall<ProcessorIdentifier, GenericVoidValue>;
    /**
     * @generated from protobuf rpc: DisconnectAllGateOutputsFromProcessor(sushi_rpc.ProcessorIdentifier) returns (sushi_rpc.GenericVoidValue);
     */
    disconnectAllGateOutputsFromProcessor(input: ProcessorIdentifier, options?: RpcOptions): UnaryCall<ProcessorIdentifier, GenericVoidValue>;
}
/**
 * @generated from protobuf service sushi_rpc.CvGateController
 */
export class CvGateControllerClient implements ICvGateControllerClient, ServiceInfo {
    typeName = CvGateController.typeName;
    methods = CvGateController.methods;
    options = CvGateController.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetCvInputChannelCount(sushi_rpc.GenericVoidValue) returns (sushi_rpc.GenericIntValue);
     */
    getCvInputChannelCount(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, GenericIntValue> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GenericVoidValue, GenericIntValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetCvOutputChannelCount(sushi_rpc.GenericVoidValue) returns (sushi_rpc.GenericIntValue);
     */
    getCvOutputChannelCount(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, GenericIntValue> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GenericVoidValue, GenericIntValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetAllCvInputConnections(sushi_rpc.GenericVoidValue) returns (sushi_rpc.CvConnectionList);
     */
    getAllCvInputConnections(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, CvConnectionList> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<GenericVoidValue, CvConnectionList>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetAllCvOutputConnections(sushi_rpc.GenericVoidValue) returns (sushi_rpc.CvConnectionList);
     */
    getAllCvOutputConnections(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, CvConnectionList> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<GenericVoidValue, CvConnectionList>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetAllGateInputConnections(sushi_rpc.GenericVoidValue) returns (sushi_rpc.GateConnectionList);
     */
    getAllGateInputConnections(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, GateConnectionList> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<GenericVoidValue, GateConnectionList>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetAllGateOutputConnections(sushi_rpc.GenericVoidValue) returns (sushi_rpc.GateConnectionList);
     */
    getAllGateOutputConnections(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, GateConnectionList> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<GenericVoidValue, GateConnectionList>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetCvInputConnectionsForProcessor(sushi_rpc.ProcessorIdentifier) returns (sushi_rpc.CvConnectionList);
     */
    getCvInputConnectionsForProcessor(input: ProcessorIdentifier, options?: RpcOptions): UnaryCall<ProcessorIdentifier, CvConnectionList> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<ProcessorIdentifier, CvConnectionList>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetCvOutputConnectionsForProcessor(sushi_rpc.ProcessorIdentifier) returns (sushi_rpc.CvConnectionList);
     */
    getCvOutputConnectionsForProcessor(input: ProcessorIdentifier, options?: RpcOptions): UnaryCall<ProcessorIdentifier, CvConnectionList> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<ProcessorIdentifier, CvConnectionList>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetGateInputConnectionsForProcessor(sushi_rpc.ProcessorIdentifier) returns (sushi_rpc.GateConnectionList);
     */
    getGateInputConnectionsForProcessor(input: ProcessorIdentifier, options?: RpcOptions): UnaryCall<ProcessorIdentifier, GateConnectionList> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<ProcessorIdentifier, GateConnectionList>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetGateOutputConnectionsForProcessor(sushi_rpc.ProcessorIdentifier) returns (sushi_rpc.GateConnectionList);
     */
    getGateOutputConnectionsForProcessor(input: ProcessorIdentifier, options?: RpcOptions): UnaryCall<ProcessorIdentifier, GateConnectionList> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<ProcessorIdentifier, GateConnectionList>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ConnectCvInputToParameter(sushi_rpc.CvConnection) returns (sushi_rpc.GenericVoidValue);
     */
    connectCvInputToParameter(input: CvConnection, options?: RpcOptions): UnaryCall<CvConnection, GenericVoidValue> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<CvConnection, GenericVoidValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ConnectCvOutputFromParameter(sushi_rpc.CvConnection) returns (sushi_rpc.GenericVoidValue);
     */
    connectCvOutputFromParameter(input: CvConnection, options?: RpcOptions): UnaryCall<CvConnection, GenericVoidValue> {
        const method = this.methods[11], opt = this._transport.mergeOptions(options);
        return stackIntercept<CvConnection, GenericVoidValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ConnectGateInputToProcessor(sushi_rpc.GateConnection) returns (sushi_rpc.GenericVoidValue);
     */
    connectGateInputToProcessor(input: GateConnection, options?: RpcOptions): UnaryCall<GateConnection, GenericVoidValue> {
        const method = this.methods[12], opt = this._transport.mergeOptions(options);
        return stackIntercept<GateConnection, GenericVoidValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ConnectGateOutputFromProcessor(sushi_rpc.GateConnection) returns (sushi_rpc.GenericVoidValue);
     */
    connectGateOutputFromProcessor(input: GateConnection, options?: RpcOptions): UnaryCall<GateConnection, GenericVoidValue> {
        const method = this.methods[13], opt = this._transport.mergeOptions(options);
        return stackIntercept<GateConnection, GenericVoidValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DisconnectCvInput(sushi_rpc.CvConnection) returns (sushi_rpc.GenericVoidValue);
     */
    disconnectCvInput(input: CvConnection, options?: RpcOptions): UnaryCall<CvConnection, GenericVoidValue> {
        const method = this.methods[14], opt = this._transport.mergeOptions(options);
        return stackIntercept<CvConnection, GenericVoidValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DisconnectCvOutput(sushi_rpc.CvConnection) returns (sushi_rpc.GenericVoidValue);
     */
    disconnectCvOutput(input: CvConnection, options?: RpcOptions): UnaryCall<CvConnection, GenericVoidValue> {
        const method = this.methods[15], opt = this._transport.mergeOptions(options);
        return stackIntercept<CvConnection, GenericVoidValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DisconnectGateInput(sushi_rpc.GateConnection) returns (sushi_rpc.GenericVoidValue);
     */
    disconnectGateInput(input: GateConnection, options?: RpcOptions): UnaryCall<GateConnection, GenericVoidValue> {
        const method = this.methods[16], opt = this._transport.mergeOptions(options);
        return stackIntercept<GateConnection, GenericVoidValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DisconnectGateOutput(sushi_rpc.GateConnection) returns (sushi_rpc.GenericVoidValue);
     */
    disconnectGateOutput(input: GateConnection, options?: RpcOptions): UnaryCall<GateConnection, GenericVoidValue> {
        const method = this.methods[17], opt = this._transport.mergeOptions(options);
        return stackIntercept<GateConnection, GenericVoidValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DisconnectAllCvInputsFromProcessor(sushi_rpc.ProcessorIdentifier) returns (sushi_rpc.GenericVoidValue);
     */
    disconnectAllCvInputsFromProcessor(input: ProcessorIdentifier, options?: RpcOptions): UnaryCall<ProcessorIdentifier, GenericVoidValue> {
        const method = this.methods[18], opt = this._transport.mergeOptions(options);
        return stackIntercept<ProcessorIdentifier, GenericVoidValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DisconnectAllCvOutputsFromProcessor(sushi_rpc.ProcessorIdentifier) returns (sushi_rpc.GenericVoidValue);
     */
    disconnectAllCvOutputsFromProcessor(input: ProcessorIdentifier, options?: RpcOptions): UnaryCall<ProcessorIdentifier, GenericVoidValue> {
        const method = this.methods[19], opt = this._transport.mergeOptions(options);
        return stackIntercept<ProcessorIdentifier, GenericVoidValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DisconnectAllGateInputsFromProcessor(sushi_rpc.ProcessorIdentifier) returns (sushi_rpc.GenericVoidValue);
     */
    disconnectAllGateInputsFromProcessor(input: ProcessorIdentifier, options?: RpcOptions): UnaryCall<ProcessorIdentifier, GenericVoidValue> {
        const method = this.methods[20], opt = this._transport.mergeOptions(options);
        return stackIntercept<ProcessorIdentifier, GenericVoidValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DisconnectAllGateOutputsFromProcessor(sushi_rpc.ProcessorIdentifier) returns (sushi_rpc.GenericVoidValue);
     */
    disconnectAllGateOutputsFromProcessor(input: ProcessorIdentifier, options?: RpcOptions): UnaryCall<ProcessorIdentifier, GenericVoidValue> {
        const method = this.methods[21], opt = this._transport.mergeOptions(options);
        return stackIntercept<ProcessorIdentifier, GenericVoidValue>("unary", this._transport, method, opt, input);
    }
}
/**
 * @generated from protobuf service sushi_rpc.OscController
 */
export interface IOscControllerClient {
    /**
     * @generated from protobuf rpc: GetSendIP(sushi_rpc.GenericVoidValue) returns (sushi_rpc.GenericStringValue);
     */
    getSendIP(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, GenericStringValue>;
    /**
     * @generated from protobuf rpc: GetSendPort(sushi_rpc.GenericVoidValue) returns (sushi_rpc.GenericIntValue);
     */
    getSendPort(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, GenericIntValue>;
    /**
     * @generated from protobuf rpc: GetReceivePort(sushi_rpc.GenericVoidValue) returns (sushi_rpc.GenericIntValue);
     */
    getReceivePort(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, GenericIntValue>;
    /**
     * @generated from protobuf rpc: GetEnabledParameterOutputs(sushi_rpc.GenericVoidValue) returns (sushi_rpc.OscParameterOutputList);
     */
    getEnabledParameterOutputs(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, OscParameterOutputList>;
    /**
     * @generated from protobuf rpc: EnableOutputForParameter(sushi_rpc.ParameterIdentifier) returns (sushi_rpc.GenericVoidValue);
     */
    enableOutputForParameter(input: ParameterIdentifier, options?: RpcOptions): UnaryCall<ParameterIdentifier, GenericVoidValue>;
    /**
     * @generated from protobuf rpc: DisableOutputForParameter(sushi_rpc.ParameterIdentifier) returns (sushi_rpc.GenericVoidValue);
     */
    disableOutputForParameter(input: ParameterIdentifier, options?: RpcOptions): UnaryCall<ParameterIdentifier, GenericVoidValue>;
    /**
     * @generated from protobuf rpc: EnableAllOutput(sushi_rpc.GenericVoidValue) returns (sushi_rpc.GenericVoidValue);
     */
    enableAllOutput(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, GenericVoidValue>;
    /**
     * @generated from protobuf rpc: DisableAllOutput(sushi_rpc.GenericVoidValue) returns (sushi_rpc.GenericVoidValue);
     */
    disableAllOutput(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, GenericVoidValue>;
}
/**
 * @generated from protobuf service sushi_rpc.OscController
 */
export class OscControllerClient implements IOscControllerClient, ServiceInfo {
    typeName = OscController.typeName;
    methods = OscController.methods;
    options = OscController.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetSendIP(sushi_rpc.GenericVoidValue) returns (sushi_rpc.GenericStringValue);
     */
    getSendIP(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, GenericStringValue> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GenericVoidValue, GenericStringValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetSendPort(sushi_rpc.GenericVoidValue) returns (sushi_rpc.GenericIntValue);
     */
    getSendPort(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, GenericIntValue> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GenericVoidValue, GenericIntValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetReceivePort(sushi_rpc.GenericVoidValue) returns (sushi_rpc.GenericIntValue);
     */
    getReceivePort(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, GenericIntValue> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<GenericVoidValue, GenericIntValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetEnabledParameterOutputs(sushi_rpc.GenericVoidValue) returns (sushi_rpc.OscParameterOutputList);
     */
    getEnabledParameterOutputs(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, OscParameterOutputList> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<GenericVoidValue, OscParameterOutputList>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: EnableOutputForParameter(sushi_rpc.ParameterIdentifier) returns (sushi_rpc.GenericVoidValue);
     */
    enableOutputForParameter(input: ParameterIdentifier, options?: RpcOptions): UnaryCall<ParameterIdentifier, GenericVoidValue> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<ParameterIdentifier, GenericVoidValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DisableOutputForParameter(sushi_rpc.ParameterIdentifier) returns (sushi_rpc.GenericVoidValue);
     */
    disableOutputForParameter(input: ParameterIdentifier, options?: RpcOptions): UnaryCall<ParameterIdentifier, GenericVoidValue> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<ParameterIdentifier, GenericVoidValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: EnableAllOutput(sushi_rpc.GenericVoidValue) returns (sushi_rpc.GenericVoidValue);
     */
    enableAllOutput(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, GenericVoidValue> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<GenericVoidValue, GenericVoidValue>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DisableAllOutput(sushi_rpc.GenericVoidValue) returns (sushi_rpc.GenericVoidValue);
     */
    disableAllOutput(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, GenericVoidValue> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<GenericVoidValue, GenericVoidValue>("unary", this._transport, method, opt, input);
    }
}
/**
 * @generated from protobuf service sushi_rpc.SessionController
 */
export interface ISessionControllerClient {
    /**
     * @generated from protobuf rpc: SaveSession(sushi_rpc.GenericVoidValue) returns (sushi_rpc.SessionState);
     */
    saveSession(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, SessionState>;
    /**
     * @generated from protobuf rpc: RestoreSession(sushi_rpc.SessionState) returns (sushi_rpc.GenericVoidValue);
     */
    restoreSession(input: SessionState, options?: RpcOptions): UnaryCall<SessionState, GenericVoidValue>;
}
/**
 * @generated from protobuf service sushi_rpc.SessionController
 */
export class SessionControllerClient implements ISessionControllerClient, ServiceInfo {
    typeName = SessionController.typeName;
    methods = SessionController.methods;
    options = SessionController.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: SaveSession(sushi_rpc.GenericVoidValue) returns (sushi_rpc.SessionState);
     */
    saveSession(input: GenericVoidValue, options?: RpcOptions): UnaryCall<GenericVoidValue, SessionState> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GenericVoidValue, SessionState>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RestoreSession(sushi_rpc.SessionState) returns (sushi_rpc.GenericVoidValue);
     */
    restoreSession(input: SessionState, options?: RpcOptions): UnaryCall<SessionState, GenericVoidValue> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<SessionState, GenericVoidValue>("unary", this._transport, method, opt, input);
    }
}
/**
 * @generated from protobuf service sushi_rpc.NotificationController
 */
export interface INotificationControllerClient {
    /**
     * @generated from protobuf rpc: SubscribeToTransportChanges(sushi_rpc.GenericVoidValue) returns (stream sushi_rpc.TransportUpdate);
     */
    subscribeToTransportChanges(input: GenericVoidValue, options?: RpcOptions): ServerStreamingCall<GenericVoidValue, TransportUpdate>;
    /**
     * @generated from protobuf rpc: SubscribeToEngineCpuTimingUpdates(sushi_rpc.GenericVoidValue) returns (stream sushi_rpc.CpuTimings);
     */
    subscribeToEngineCpuTimingUpdates(input: GenericVoidValue, options?: RpcOptions): ServerStreamingCall<GenericVoidValue, CpuTimings>;
    /**
     * @generated from protobuf rpc: SubscribeToTrackChanges(sushi_rpc.GenericVoidValue) returns (stream sushi_rpc.TrackUpdate);
     */
    subscribeToTrackChanges(input: GenericVoidValue, options?: RpcOptions): ServerStreamingCall<GenericVoidValue, TrackUpdate>;
    /**
     * @generated from protobuf rpc: SubscribeToProcessorChanges(sushi_rpc.GenericVoidValue) returns (stream sushi_rpc.ProcessorUpdate);
     */
    subscribeToProcessorChanges(input: GenericVoidValue, options?: RpcOptions): ServerStreamingCall<GenericVoidValue, ProcessorUpdate>;
    /**
     * @generated from protobuf rpc: SubscribeToParameterUpdates(sushi_rpc.ParameterNotificationBlocklist) returns (stream sushi_rpc.ParameterUpdate);
     */
    subscribeToParameterUpdates(input: ParameterNotificationBlocklist, options?: RpcOptions): ServerStreamingCall<ParameterNotificationBlocklist, ParameterUpdate>;
    /**
     * @generated from protobuf rpc: SubscribeToPropertyUpdates(sushi_rpc.PropertyNotificationBlocklist) returns (stream sushi_rpc.PropertyValue);
     */
    subscribeToPropertyUpdates(input: PropertyNotificationBlocklist, options?: RpcOptions): ServerStreamingCall<PropertyNotificationBlocklist, PropertyValue>;
}
/**
 * @generated from protobuf service sushi_rpc.NotificationController
 */
export class NotificationControllerClient implements INotificationControllerClient, ServiceInfo {
    typeName = NotificationController.typeName;
    methods = NotificationController.methods;
    options = NotificationController.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: SubscribeToTransportChanges(sushi_rpc.GenericVoidValue) returns (stream sushi_rpc.TransportUpdate);
     */
    subscribeToTransportChanges(input: GenericVoidValue, options?: RpcOptions): ServerStreamingCall<GenericVoidValue, TransportUpdate> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GenericVoidValue, TransportUpdate>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SubscribeToEngineCpuTimingUpdates(sushi_rpc.GenericVoidValue) returns (stream sushi_rpc.CpuTimings);
     */
    subscribeToEngineCpuTimingUpdates(input: GenericVoidValue, options?: RpcOptions): ServerStreamingCall<GenericVoidValue, CpuTimings> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GenericVoidValue, CpuTimings>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SubscribeToTrackChanges(sushi_rpc.GenericVoidValue) returns (stream sushi_rpc.TrackUpdate);
     */
    subscribeToTrackChanges(input: GenericVoidValue, options?: RpcOptions): ServerStreamingCall<GenericVoidValue, TrackUpdate> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<GenericVoidValue, TrackUpdate>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SubscribeToProcessorChanges(sushi_rpc.GenericVoidValue) returns (stream sushi_rpc.ProcessorUpdate);
     */
    subscribeToProcessorChanges(input: GenericVoidValue, options?: RpcOptions): ServerStreamingCall<GenericVoidValue, ProcessorUpdate> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<GenericVoidValue, ProcessorUpdate>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SubscribeToParameterUpdates(sushi_rpc.ParameterNotificationBlocklist) returns (stream sushi_rpc.ParameterUpdate);
     */
    subscribeToParameterUpdates(input: ParameterNotificationBlocklist, options?: RpcOptions): ServerStreamingCall<ParameterNotificationBlocklist, ParameterUpdate> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<ParameterNotificationBlocklist, ParameterUpdate>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SubscribeToPropertyUpdates(sushi_rpc.PropertyNotificationBlocklist) returns (stream sushi_rpc.PropertyValue);
     */
    subscribeToPropertyUpdates(input: PropertyNotificationBlocklist, options?: RpcOptions): ServerStreamingCall<PropertyNotificationBlocklist, PropertyValue> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<PropertyNotificationBlocklist, PropertyValue>("serverStreaming", this._transport, method, opt, input);
    }
}
