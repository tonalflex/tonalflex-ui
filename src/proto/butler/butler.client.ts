// @generated by protobuf-ts 2.9.4 with parameter client_generic
// @generated from protobuf file "butler/butler.proto" (package "butler", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { SessionService } from "./butler";
import type { DeleteSessionResponse } from "./butler";
import type { DeleteSessionRequest } from "./butler";
import type { ListSessionsResponse } from "./butler";
import type { ListSessionsRequest } from "./butler";
import type { LoadSessionResponse } from "./butler";
import type { LoadSessionRequest } from "./butler";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { SaveSessionResponse } from "./butler";
import type { SaveSessionRequest } from "./butler";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service butler.SessionService
 */
export interface ISessionServiceClient {
    /**
     * @generated from protobuf rpc: SaveSession(butler.SaveSessionRequest) returns (butler.SaveSessionResponse);
     */
    saveSession(input: SaveSessionRequest, options?: RpcOptions): UnaryCall<SaveSessionRequest, SaveSessionResponse>;
    /**
     * @generated from protobuf rpc: LoadSession(butler.LoadSessionRequest) returns (butler.LoadSessionResponse);
     */
    loadSession(input: LoadSessionRequest, options?: RpcOptions): UnaryCall<LoadSessionRequest, LoadSessionResponse>;
    /**
     * @generated from protobuf rpc: ListSessions(butler.ListSessionsRequest) returns (butler.ListSessionsResponse);
     */
    listSessions(input: ListSessionsRequest, options?: RpcOptions): UnaryCall<ListSessionsRequest, ListSessionsResponse>;
    /**
     * @generated from protobuf rpc: DeleteSession(butler.DeleteSessionRequest) returns (butler.DeleteSessionResponse);
     */
    deleteSession(input: DeleteSessionRequest, options?: RpcOptions): UnaryCall<DeleteSessionRequest, DeleteSessionResponse>;
}
/**
 * @generated from protobuf service butler.SessionService
 */
export class SessionServiceClient implements ISessionServiceClient, ServiceInfo {
    typeName = SessionService.typeName;
    methods = SessionService.methods;
    options = SessionService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: SaveSession(butler.SaveSessionRequest) returns (butler.SaveSessionResponse);
     */
    saveSession(input: SaveSessionRequest, options?: RpcOptions): UnaryCall<SaveSessionRequest, SaveSessionResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<SaveSessionRequest, SaveSessionResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: LoadSession(butler.LoadSessionRequest) returns (butler.LoadSessionResponse);
     */
    loadSession(input: LoadSessionRequest, options?: RpcOptions): UnaryCall<LoadSessionRequest, LoadSessionResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<LoadSessionRequest, LoadSessionResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ListSessions(butler.ListSessionsRequest) returns (butler.ListSessionsResponse);
     */
    listSessions(input: ListSessionsRequest, options?: RpcOptions): UnaryCall<ListSessionsRequest, ListSessionsResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListSessionsRequest, ListSessionsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteSession(butler.DeleteSessionRequest) returns (butler.DeleteSessionResponse);
     */
    deleteSession(input: DeleteSessionRequest, options?: RpcOptions): UnaryCall<DeleteSessionRequest, DeleteSessionResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteSessionRequest, DeleteSessionResponse>("unary", this._transport, method, opt, input);
    }
}
